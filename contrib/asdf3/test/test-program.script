;;; -*- Lisp -*-

(DBG :foo (current-lisp-file-pathname))

(unless (or #+(or clisp clozure (and ecl (not ecl-bytecmp)) lispworks mkcl sbcl) t
            #+cmu nil ;; uncomment if you have 32-bit gcc support - or can autodetect
            #+clisp (version-satisfies
                     (first (split-string (lisp-implementation-version) :separator " "))
                     "2.48"))
  (DBG "Creating standalone programs is not supported on your CL implementation")
  (leave-test "Skipping test" 0))

#-(and) ;; debug stuff for MKCL
(progn
(trace ASDF/BUNDLE:BUNDLABLE-FILE-P)
(trace ASDF/BUNDLE:DIRECT-DEPENDENCY-FILES)
(setq compiler::*delete-compiler-internal-files* nil)
(setq *compile-extra-options* '(:c-file t :data-file t :h-file t))
(proclaim '(optimize (debug 3))) ;; full debug info
(setq compiler::*trace-cc* t)
(si::reopen-package :compiler)
(trace compiler::builder)
)

(defparameter exe (output-file (make-operation 'program-op) (find-system :hello-world-example)))
(assert (absolute-pathname-p exe))

#-mkcl
(progn
;; Try to load lisp-invocation from xcvb
(setf *central-registry*
      (list *asdf-directory* ;; be sure that *OUR* asdf is first of any possible ASDF
            *uiop-directory*
            ;; try finding xcvb's lisp-invocation right next to asdf.
            (subpathname *asdf-directory* "../xcvb/")))
(unless (find-system :lisp-invocation nil)
  ;; try harder by enabling the user's source-registry
  (initialize-source-registry ""))
(unless (find-system :lisp-invocation nil)
  (leave-test "Couldn't find lisp-invocation. Skipping the rest the test." 0))
(load-system :lisp-invocation)
;; Disable any user source registry.
(initialize-source-registry `(:source-registry :ignore-inherited-configuration))

(delete-file-if-exists exe)
(assert-equal
 (multiple-value-list
  (run-program
   (symbol-call :lisp-invocation :lisp-invocation-arglist
                :load (native-namestring (subpathname *test-directory* "make-hello-world.lisp")))))
 '(nil nil 0)))

#+mkcl
(let* #+windows
      ((dll-orig (merge-pathnames (make-pathname :name (mkcl:str+ "mkcl_" (lisp-implementation-version)) :type "dll")
				  (si::self-truename)))
       (exe (car (asdf::output-files 'program-op :hello-world-example)))
       (exe-dir (make-pathname :name nil :type nil :defaults exe))
       (dll-dest (merge-pathnames exe-dir dll-orig))
       )
      #-windows ()
  (operate 'program-op :hello-world-example
	   :prefix-lisp-object-files (list (namestring (truename (translate-logical-pathname #P"SYS:cmp.a"))))
	   #-windows :use-mkcl-shared-libraries #-windows nil ;; force static linking on unix
	   :epilogue-code '(progn
			     (setq uiop/image:*image-dumped-p* :executable)
			     (uiop/image:restore-image :entry-point (read-from-string "hello:entry-point"))))
  #+windows (copy-file dll-orig dll-dest) ;; make sure mkcl-X.X.X.dll is the same directory as the executable
  )


(assert (probe-file* exe))

(assert-equal (run-program `(,(native-namestring exe)) :output :lines)
              '("hello, world"))

(assert-equal (run-program `(,(native-namestring exe) "a" "b c" "d") :output :lines)
              '("hello, world"
                "You passed 3 arguments:"
                "  \"a\""
                "  \"b c\""
                "  \"d\""))

